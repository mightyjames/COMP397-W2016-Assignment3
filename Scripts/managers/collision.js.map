{"version":3,"sources":["managers/collision.ts"],"names":[],"mappings":"AAAA,IAAO,QAAQ,CAwDd;AAxDD,WAAO,QAAQ,EAAC,CAAC;IACb,0BAA0B;IAC1B;QAQI,mBAAY,MAAsB;YAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC;QAEM,4BAAQ,GAAf,UAAgB,UAA0B,EAAE,QAAwB;YAChE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QACvG,CAAC;QAEM,yBAAK,GAAZ,UAAa,MAA0B;YACnC,IAAI,UAAU,GAAmB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YACtD,IAAI,QAAQ,GAAmB,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;YAEpD,IAAI,gBAAgB,GAAW,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;YACzD,IAAI,gBAAgB,GAAW,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC;YAEnD,IAAI,eAAe,GAAW,gBAAgB,GAAG,gBAAgB,CAAC;YAElE,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9B,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAE9B,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YACvC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;YAGvC;mEACuD;YACvD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;gBAExD,8BAA8B;gBAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC;oBAC/B,uCAAuC;oBACvC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5B,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC/B,CAAC;gBAED,4BAA4B;gBAC5B,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC3B,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC;oBAC/B,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACjC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC/B,CAAC;YACL,CAAC;QACL,CAAC;QACL,gBAAC;IAAD,CArDA,AAqDC,IAAA;IArDY,kBAAS,YAqDrB,CAAA;AACL,CAAC,EAxDM,QAAQ,KAAR,QAAQ,QAwDd","file":"managers/collision.js","sourcesContent":["module managers {\n    // COLLISION MANAGER CLASS\n    export class Collision {\n        // PRIVATE INSTANCE VARIABLES\n        private _player: objects.Player;\n        private _police: objects.Police;\n        private _scoreBoard: objects.Scoreboard;\n        private _health: objects.HealthOrb;\n        private _game: createjs.Container;\n        \n        constructor(player: objects.Player) {\n            this._player = player;\n            this._game = game;\n        }\n\n        public distance(startPoint: createjs.Point, endPoint: createjs.Point): number {\n            return Math.sqrt(Math.pow((endPoint.x - startPoint.x), 2) + Math.pow(endPoint.y - startPoint.y, 2))\n        }\n\n        public check(object: objects.GameObject) {\n            var startPoint: createjs.Point = new createjs.Point();\n            var endPoint: createjs.Point = new createjs.Point();\n\n            var playerHalfHeight: number = this._player.height * 0.5;\n            var objectHalfHeight: number = object.height * 0.5;\n\n            var minimumDistance: number = playerHalfHeight + objectHalfHeight;\n\n            startPoint.x = this._player.x;\n            startPoint.y = this._player.y;\n\n            endPoint.x = object.centerX + object.x;\n            endPoint.y = object.centerY + object.y;\n            \n            \n            /* check if the distance between the player and \n              the other object is less than the minimum distance */\n            if (this.distance(startPoint, endPoint) < minimumDistance) {\n                \n                // check if it's an island hit\n                if (object.name === \"health\") {\n                    this._player.playerHealth += 1;\n                    //this._game.removeChild(this._health);\n                    createjs.Sound.play('heal');\n                    console.log(\"health hit!\");\n                }\n                \n                // check if it's a cloud hit\n                if (object.name === \"police\") {\n                    this._player.playerHealth -= 1;\n                    createjs.Sound.play('collision');\n                    console.log(\"police hit!\");\n                }\n            }\n        }\n    }\n}\n"],"sourceRoot":"/source/"}